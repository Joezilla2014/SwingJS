PROGRESS
========
4/4/2015

j2sjmol.js updated due to problems with incomplete loading

several issues found in getting SimpleDateFormat working

 -- integer /=
 -- current-date processing
 -- missing inner class constructors
 -- cyclic static references
 -- detailing of J2S bugs
 -- SimpleDateFormat working
 -- fixed sb.append(int) --> sb.append("" + i)

 

J2S bugs
--------
4/4/2015

#7 J2S does not properly do integer/long/short/byte  /=

  n /= 3
  
needs to be written out as

  n = n / 3
  
  
#6 J2S drops seemingly unnecessary constructors in inner classes. These
are required, and must be included. I added j2sNative blocks to do this.

public class Gregorian extends BaseCalendar {

    static class Date extends BaseCalendar.Date {
      protected Date() {
        super();
        /**
         * @j2sNative
         */
        {
      	int dummy = 1; // forces J2S to leave this in
        }
    }

    protected Date(TimeZone zone) {
        super(zone);
        /**
         * @j2sNative
         */
        {
      	int dummy = 1; // forces J2S to leave this in
        }
    }

  ...
  
 
#5 for some reason HashMap cannot call its superclass (AbstractMap) "putall" method from its constructor.

#4 @J2SRequireImport({jsjava.util.PropertyResourceBundle.class})

is required for  public abstract class ResourceBundle because the inner class
ResourceBundle.Control requires it, but for some reason it is not included in the
MUST list in the Clazz.load() call.

#3 J2S compiler bug -- inner classes variables are simplified to a b c d..., making it
nearly impossible to insert @j2sNative blocks.

#2 array declarations 

 int[][] a = new int[3][]
 
 and
 
 int[] a = new int[3]
 
 are treated the same. The first needs to be changed to javajs.util.AU.newInt2(3)
 Several similar methods are in javajs.util.AU
 

#1 The J2S compiler has support for proper method signature handling 
in cases such as:

  new URL((URL) null, filePath, null)
  
The issue here is that without that (URL) the call is ambiguous. 
However, there is a flaw in j2slib (jmolj2s) in that the called 
method receives a "null" URL object, which does not in JavaScript
evaluate to true for "== null". Thus, testing for null within 
functions called this way process improperly.

j2sjmol.js (j2slib.js)
----------------------
j2sjmol requiree modification to properly identify the end of all class loading so 
that an asynchronous function can be called. Working currently with 

   Clazz.loadClass("java.util.Properties",function(){alert("ready!")})
   
for user-controlled loading of classes from JavaScript.
   



PROGRESS
========
4/4/2015

j2sjmol.js updated due to problems with incomplete loading

several issues found in getting SimpleDateFormat working

 -- integer /=
 -- current-date processing
 -- missing inner class constructors
 -- cyclic static references

JavaScript Examples used for testing
------------------------------------
Clazz.loadClass(); // equates "Class" with "Clazz" and allow uncompressed code calling

Class.loadClass("jsjava.text.SimpleDateFormat");

   undefined

x = new jsjava.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");

   Object { serialVersionOnStream: 1, pattern: "EEE, d MMM yyyy HH:mm:ss Z", compiledPattern: Array[16], zeroDigit: "

x.format(new Date);

   "Sat, 4 Apr 2015 03:57:31 -0500"

Class.loadClass("jsjava.text.SimpleDateFormat", function() { x = new jsjava.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z"); x.format(new Date)} );


  

4/3/2015

ResourceBundle working with property loading. 
But ResourceBundle.Control calls new PropertyResourceBundle(), and that 
causes a loading loop. Solution is to give PropertyResourceBundle() an empty
constructor and to call it with reflection.

4/2/2015

JApplet loading successful

ResourceBundle working with Java class loading
DecimalFormat working

Thread.currentThread() working. For example, this works:

  SwingJS.getJavaResource = function(path) {
   // path looks like jssun.util...., for example
    var appId = jsjava.lang.Thread.currentThread().getName();
    path = Jmol._applets[appId].__Info.j2sPath + "/" + path;
    var s = Jmol._getFileData(path);
    return (s.startsWith("[Exception") ? null : s);
  }
  


Differences to Original JDK 1.6
===============================

DISCUSS
=======

Table row/col sorter needs checking after removal of java.text.Collator references

I had to move all of SunHints class to RenderingHints, or the 
two classes could not be loaded. Shouldn't be a problem, I think. The sun classes are
not accessible anyway.

We now have jsjava.lang.Thread and jsjava.lang.ThreadGroup. These should be useful in
figuring out what we want to do with those. ThreadGroup in particular is interesting,
as it is used to key for AppContexts. We will see if that use useful or not.


MINOR ISSUES--requiring no rewriting
====================================

accessibility
native classes
security
serialization

MINOR ISSUES--requiring some rewriting/refactoring by Bob and Udo  
=================================================================

java.util.BitSet must be 16-bit


MINOR ISSUES--requiring some rewriting/refactoring outside of SwingJS  
=====================================================================

primitive numerical types
forced null typing
native classes
java.awt.Color
javax.swing.JFileDialog
key focus
static methods and classes -- order is important

MAJOR ISSUES--for Bob and Udo within SwingJS
============================================

fonts
OS-dependent classes
AWT component peers
no threads


MAJOR ISSUES--to be resolved by implementers
============================================

fonts
specific AWT components not implemented
no threads
image loading
no BigInteger; no BigDecimal
no format internationalization
no javax.swing.AutoScroller public static methods .stop, .isRunning, .processMouseDragged
no AbstractButton    public void doClick(int pressTime), as it requires Thread.sleep()

//////////////////////////////////////////////////////////////////////////////

MINOR ISSUES--requiring no rewriting
====================================

accessibility
-------------

All Accessibility handling has been commented out to save the download footprint.
This removes the need for sun.misc.SharedSecrets


security
--------

All JavaScript security is handled by the browser natively. 
Thus, Java security checking is no longer necessary, and 
java.security.AccessController has been simplified to work without
native security checking.


serialization
-------------

All serialization has been removed. It was never very useful for Swing anyway, 
because one needs exactly the same Java version to save and restore serialized objects.


MINOR ISSUES--requiring some rewriting/refactoring by Bob and Udo  
=================================================================

java.util.BitSet must be 16-bit
-------------------------------

Although JavaScript will support numerical values up to 2^54, 
these "long" values are really doubles. In addition, bit-wise 
operations on values greater than 2^30 do not give the 
expected results because integer bit-wise operation is used. 

Math.pow(2,31)
2147483648
Math.pow(2,31)&Math.pow(2,31)
-2147483648

This is no real consequence; it's just something that has to be done.


MINOR ISSUES--requiring some rewriting/refactoring outside of SwingJS  
=====================================================================

primitive numerical types
-------------------------

JavaScript cannot distinguish among primitive number types 
int, short, float, and double. Bob's J2S fix does allow for
distinguishing between int[] and float[], but that is all. 
The implication is for overloaded methods and constructors.
For example:

  Color(int r, int g, int b, int a)
  Color(float r, float g, float b, float a)

cannot be distinguished. A very important case in this regard is 

  StringBuffer.append(int)
  StringBuffer.append(float)
  
There is no way to know one's intent here. Integers must be changed to strings:

  sb.append("" + i)

  

This will need careful checking and will be the source of bugs, for sure,
because it is next to impossible to find all of these, and even if they are
found, certain cases such as above will never be perfectly resolved.

In addition, JavaScript does not/cannot support "long". 
One cannot test against Long.MAX_VALUE or Long.MIN_VALUE.

Since int, long, byte, and char are not really integers, care must be taken 
to avoid a loop such as the following, which was in java.text.DigitList:

  while (source > 0) {
    ... 
    source /= 10 
  }

Similarly, large integers will never roll over to negative ones. They will
just get bigger.

						int newLength = lineBuf.length * 2;
						/**
						 * @j2sIgnore
						 */
						{
							// never going to happen in JavaScript
							if (newLength < 0) {
								newLength = Integer.MAX_VALUE;
							}
						}


Also, J2S does not translate properly

  int n = 110
  n /= 100
  
This needs to be recast as
  
  n = n / 100
  
For example, SimpleDateFormat needs

month = Clazz.doubleToInt(month / 367);

instead of 

month /= 367


  
  


forced null typing
------------------

The J2S compiler has support for proper method signature handling 
in cases such as:

  new URL((URL) null, filePath, null)
  
The issue here is that without that (URL) the call is ambiguous. 
However, there is a flaw in j2slib (jmolj2s) in that the called 
method receives a "null" URL object, which does not in JavaScript
evaluate to true for "== null". Thus, testing for null within 
functions called this way process improperly.


java.awt.Color
--------------

See note under primitive types, above.

ColorSpace: only "support" CS_sRGB

 -BH: This is a temporary edit just to get us started.


javax.swing.JFileDialog
-----------------------

Not implemented. HTML5 cannot expose a file directory structure


native classes
--------------

The J2S compiler ignores all static native method declarations.
Anything of this nature needs to be implemented in JavaScript if it is needed,
using j2sNative blocks:

/**
 * @j2sNative
 *
 */
 {
   // it is critical to remember to insert this { } phrasing, 
   // or the block will be ignored!
 }
 

key Focus
---------
- Less explicit key focus 
- handling (mostly done by Browser/HTML)
- no SwingUtilities.findFocusOwner

static methods and classes -- order is important
------------------------------------------------

J2S cannot run a static method that calls an uninitiated static variable:

	static int x = createX();

    static int createX() {
		return y;
	}
	
	static int y = 20;

will fail. It's actually quite odd that it does not fail in Java as well.

Likewise, static classes hidden in other classes must be presented in an order
that does not call an uninitiated class. In java.util.Collections, for example,
it was important to move SynchronizedRandomAccessList to after SynchronizedList.

MAJOR ISSUES--for Bob and Udo within SwingJS
============================================

no threads
----------

Thread locking and synchronization are not relevant to JavaSCript.
However, anything requiring "notify.." or "waitFor.." could be a serious issue.
 
All threading must be "faked" in JavaScript. Specifically not available is:

  Thread.sleep()
  
  which is used only sparingly: 
  
    javax.swing.AbstractButton#doClick(pressTime)
    
  and in sun.awt.SunToolkit#waitForIdle() 
  
  
  
ThreadGroup should point to objects unique to an applet. 
This will allow easy access to applet-specific quantitities


fonts
-----

Fonts and FontMetrics will all be handled in JavaScript. Font matching will 
not be exact, and composite (drawn) fonts will not be supported. 

Jmol handles calls such as font.getFontMetrics(g).stringWidth("xxx") by 
creating an off-page DOM image and querying its context. 
This will be done here as well.
 
 
OS-dependent classes
--------------------

Static classes such as:

   java.awt.Toolkit
   java.awt.GraphicsEnvironment
   
   
which are created using Class.forName
will be implemented as JavaScript classes in the swingjs package

AWTAccessor and  AwtContext need to be customized 

   
AWT component peers
-------------------

ComponentPeer is a class that represents a native AWT component.
Components with such peers are called "heavy-weight" components.
They are expected to do the dirty work of graphics drawing. 

Java Swing implements peers only for JApplet, JDialog, JFrame, and JWindow. 
References to such objects have been removed, but clearly there must be 
some connection to similar DOM objects, even for "light-weight" components. 


  
MAJOR ISSUES--to be resolved by implementers
============================================

fonts
-----

Glyph/composite/outline fonts are not supported
   

specific AWT components not implemented
---------------------------------------

The only AWT components implemented are Dialog, Frame, Panel, and Window
They are subclassed as JDialog, JFrame, JPanel/JApplet, and JWindow, respectively


no threads
----------

Thread locking and synchronization are not relevant to JavaSCript.
However, anything requiring "notify.." or "waitFor.." could be a serious issue.
 
All threading must be "faked" in JavaScript. Specifically not available is:

  Thread.sleep()
  

image loading
-------------
- JavaScript does not allow synchronous image loading. A callback is required, and 
  since there is no Thread.sleep, this could be a problem in some cases. 

- BufferedImage: only "support" imageType RGB and ARGB
  -BH: This is a temporary edit, just to get us started. Certainly GRAY will be needed


no BigInteger; no BigDecimal
----------------------------

BigInteger and BigDecimal are not supported


no format internationalization
------------------------------

For now, just en for number formatters


