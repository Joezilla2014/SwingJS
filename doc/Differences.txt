Notes
=====

PROGRESS
========
5/17/2015

- adds SAX XML parsing (needed for VARNA) 
- uses sax2r3(final) from http://sourceforge.net/projects/sax/files/sax/	
- implements org.xml.sax and javax.xml.sax
- includes swingjs.JSSAXParser, swingjs.JSSAXContentHandler, swingjs.JSSAXAttributes
- see swingjs.test.TestXML.java
	    String s = "<testing></testing>"
		InputSource is = new InputSource(Rdr.getBR(s));
	    javax.xml.parsers.SAXParserFactory.newInstance().newSAXParser()
					.parse(is, new JSSAXContentHandler());
- to test, from a developer console, enter: 

  Clazz.loadClass("swingjs.test.TestXML", function() { new swingjs.test.TestXML([]) })
  

5/16/2015

- basic JTextArea/JScrollPane combination working
- height problem solved for JTextFields (HTML5 default 3px padding removed)
- background/foreground colors enabled
- JSThread adds JSThread.JSEVENT = 2000 to EventQueue for very low (after painting) processing
- Boltzmann.java working; did require reduction of repaint frequency for performance
- see http://chemapps.stolaf.edu/jmol/swingjs/site/swingjs/Boltzmann.htm

Note: it is quite nice to see that from the developer console you can issue

  testApplet._applet.tCollisions.setSize(80,30)
  
and it will do it. 

5/15/2015

- better JLabel/JTextField positioning
- GridBagLayout working
- winding rules: in javax.swing.border.LineBorder 
           Path2D path = new Path2D.Float(Path2D.WIND_EVEN_ODD);
  needs checking with browsers that ctx.fill("evenodd") works  

5/11/2015

BH working on Boltzmann
- found j2s bug #12; easy fix
- JSThread 

5/10/2015

JTextFields responding to DocumentListeners
JLabel default font and baseline considerations
see test_3.htm


5/9/2015

JTextField works, including tracking selection caret -- see test_3.htm
JSPlainDocument implemented (roughly)
JSAbstractDocument implemented (roughly)
CaretListener working

5/7/2015

Problem with duplicate Event queue dispatches for every mouse event found. 
  (JSComponentUI.installUI() needs to be empty)
  
very preliminary JTextField added -- not functional yet

5/5/2015

Now implemented, at least minimally:

JButton
JCheckBox
JRadioButton, with ButtonGroup

Control of components is now completely handled by swingjs.plaf.JSComponentUI and its subclasses.
These classes implement the LightweightPeer interface, which should take care of just about 
everything we need. They are also component change listeners. 

Mouse clicks on buttons are being properly retargeted by jsjava.awt.Container and 
then are passed on to swingjs.plaf.JSButtonListener for processing as Item.    

Event queues are working, although it appears to me that we are getting two dispatches for
every mouse event. So something is odd there.

Repainting is working properly.

Possible next steps:

1. Filling in the missing pieces in the LightweightPeer interface 
   so that all program actions are reflected properly in HTML5. 

2. Adding text boxes and starting in on handling keyboard events. 

3. Adding icons for buttons.

4. Implementing additional details in button classes.
 
among about 1000 other possibilities....
  

4/30/2015

adjustments in JSmol made to be compatible with SwingJS

JSCheckBoxUI added; not tested 
Verification added that the actual DOM button was clicked for checkboxes and radio buttons.

4/25/2015

Mouse callback action is very smooth and fast as long as 
clipping is not carried out for each component as created.
 
JRadiobuttons are working with ItemEvent (retargeted from MouseEvent)

repaint() is now completely handled using synthetic JavaScript AWT EventQueue

So this means:

-- we have working HTML5 components in swingjs.plaf
-- we have a working "Java" AWT event queue
-- basic Thread operations are working - just not sleep, wait, or notify
   but these can be handled by other means using swingjs.JSThread



---------   
4/21/2015

MouseListener working; ItemListener still not working
MouseMotionListener working

Component properties are not adjustable ("isTainted" is not set back to TRUE
in swingjs.plaf.JSComponentUI

---------   
4/19/2015

FlowLayout reporting proper positions and sizes for JRadioButtons
HTML alignment may be a bit off. 
HTML5 implementation of panels and buttons working. 
ButtonGroups working.

code: "super.xxx" out in Component, Container, and JComponent

---------   
4/18/2015

JSAppletPanel uses swingjs.JSThread, much like sun.applet.AppletPanel

/**
 * JSAppletPanel 
 * 
 * SwingJS class to start an applet. Note that this must be a JApplet,
 * not just java.awt.Applet. The implementation (for now) does not allow
 * "mixed" contents -- That is, no non-Swing Applet components are allowed.
 * 
 * The basic start up in JavaScript involves:
 * 
 * Clazz.loadClass("swingjs.JSAppletPanel"); 
 * var _appletPanel = new JSAppletPanel(viewerOptions);
 * _appletPanel.start();
 * 
 * where viewerOptions holds critical information needed to create this applet
 * 
 * 
 * @author Bob Hanson
 * 
 */

---------   
4/16/2015

SimpleDateFormat was being excluded in JSmolJavaExt.js

swingjs.JSThread extends jsjava.lang.Thread and shows how to add a thread that 
can be run or started and can continue indefinitely or upon "notification"
using setTimeout calls with anonymous function callbacks to return to the loop

AWTEvent dispatch thread working properly
revalidation working
peer preferredSize (w,h) working for radio buttons but not for panels; no positioning (x,y) yet

 
JSToolkit JavaScript methods alert, log, prompt, and confirm added

---------   
4/15/2015

AWT Events reintroduced. Just about ready for JApplet painting via 

  testApplet._appletPanel.paint(null)
  
The "EventQueue" is really an immediate setTimeout dispatcher.
The "current thread" (which identifies which applet this is in its name)
is maintained by anonymous function wrapping.
  
---------   
4/14/2015

-- preliminary "native" user interface components implemented -- see swingjs.plaf
   
abstract class swingjs.api.DOMObject 
abstract class HTML5Canvas extends DOMObject
interface swingjs.api.JQuery 
interface swingjs.api.JQueryObject

These APIs allow considerable manipulation of page HTML5 without
the need for @j2sNative blocks. For example, in swingjs.plaf.JSComponentUI:

	protected Dimension getDimension(DOMObject span) {
		String div = JSToolkit.getSwingDivId();
		JQuery jq = JSToolkit.getJQuery();
		JQueryObject jo = jq.$("#" + div);
		jo.append(span);
		int w = jq.$(span).width();
		int h = jq.$(span).height();
		jo.html("");
		return new Dimension(w, h);
	}

---------   
4/12/2015

basic very limited graphics working; no AffineTransform
still no layout

---------   
4/4/2015

j2sjmol.js updated due to problems with incomplete loading

several issues found in getting SimpleDateFormat working

 -- integer /=
 -- current-date processing
 -- missing inner class constructors
 -- cyclic static references
 -- detailing of J2S bugs
 -- SimpleDateFormat working
 -- fixed sb.append(int) --> sb.append("" + i)

---------   
4/3/2015

ResourceBundle working with property loading. 
But ResourceBundle.Control calls new PropertyResourceBundle(), and that 
causes a loading loop. Solution is to give PropertyResourceBundle() an empty
constructor and to call it with reflection.

---------   
4/2/2015

JApplet loading successful

ResourceBundle working with Java class loading
DecimalFormat working

Thread.currentThread() working. For example, this works:

  SwingJS.getJavaResource = function(path) {
   // path looks like jssun.util...., for example
    var appId = jsjava.lang.Thread.currentThread().getName();
    path = Jmol._applets[appId].__Info.j2sPath + "/" + path;
    var s = Jmol._getFileData(path);
    return (s.startsWith("[Exception") ? null : s);
  }
  
  
ThreadGroup points to objects unique to an applet. 
This will allow easy access to applet-specific quantities
  
---------   
3/19/2015

Project initiated - files from GrepCode

========================================================================== 
J2S tips
--------

It is wise to always use "return(xxx)" with no space between "return" and "(". 
and not just "return xxx" within an @j2sNative block. 
These blocks will be rewrapped by Eclipse if ALT-S-N or Alt-S-F
is pressed, and it is possible to have something like this:

		/**
		 * @j2sNative
		 * 
		 *  jQuery.$ || (jQuery.$ = jQuery);  return jQuery;
		 */

turn into this:

		/**
		 * @j2sNative
		 * 
		 *           jQuery.$ || (jQuery.$ = jQuery);  return
		 *           jQuery;
		 */

which will fail. But if we have

		/**
		 * @j2sNative
		 * 
		 *           jQuery.$ || (jQuery.$ = jQuery);  return(jQuery);
		 */

then "return(jQuery)" will always be kept as a single unit.

J2S bugs identified
-------------------
#12 Inner classes must not call other inner classes defined after them in a file.
    This showed up in java.awt.geom.Path2D.Float.CopyIterator, which extends
    java.awt.geom.Path2D.Iterator. Since the Iterator is in the code after CopyIterator,
    the reference to java.awt.geom.Path2D.Iterator in
    
    c$ = Clazz.decorateAsClass (function () {
		this.floatCoords = null;
		Clazz.instantialize (this, arguments);
	}, java.awt.geom.Path2D.Float, "CopyIterator", java.awt.geom.Path2D.Iterator);
     
    is null, and then CopyIterator does not extend Iterator.
   
#11 Integer parameter is considered Number(int,float,etc.) not Object in SAEM

	private void test1(Object ja) {
		System.out.println(ja + " is an Object");
	}

	private void test1(int ja) {
		System.out.println(ja + " is an int");
	}

	private String name;

	public static void main(String[] args) {
		
		BugTest t = new BugTest();
		t.name = "test";

		t.test1(Integer.valueOf(33));
		t.test1(33);
   ,,,		

    -- fixed for SwingJS


#10 array.getClass().getComponentType() is not implemented. This breaks 
    AbstractCollection.toArray(aa[])
    
    -- fixed for SwingJS

#9 array.getClass() returns "array" -- there is no way to determine the class of an array
   if it has no elements. However a work-around is to use
   
     java.lang.reflect.Array.newInstance(xxxx.class, n)
     
   which I have adjusted to allow for testing using .getClass().getComponentType() 
   
#8 There are times where J2S does not execute initialization in the proper order
when constructing subclasses. In this case, in the creation of JApplet, the ArrayList
(Container).component was cleared in Clazz.prepareFields for Container AFTER it was
used in the constructor for JApplet. 

The way around this is to not instantiate Objects in-line:

public class Container
...
   List<Component> component =  new ArrayList();
...

but instead put that in the constructor.

public class Container
...
   List<Component> component;
...
public Container () {
   component =  new ArrayList();
}


#7 J2S does not properly do integer/long/short/byte  /=

  n /= 3
  
needs to be written out as

  n = n / 3
  
  
#6 J2S drops seemingly unnecessary constructors in inner classes. These
are required, and must be included. I added j2sNative blocks to do this.

public class Gregorian extends BaseCalendar {

    static class Date extends BaseCalendar.Date {
      protected Date() {
        super();
        /**
         * @j2sNative
         */
        {
      	int dummy = 1; // forces J2S to leave this in
        }
    }

    protected Date(TimeZone zone) {
        super(zone);
        /**
         * @j2sNative
         */
        {
      	int dummy = 1; // forces J2S to leave this in
        }
    }

  ...
  
 
#5 for some reason HashMap cannot call its superclass (AbstractMap) "putall" method from its constructor.

#4 @J2SRequireImport({jsjava.util.PropertyResourceBundle.class})

is required for  public abstract class ResourceBundle because the inner class
ResourceBundle.Control requires it, but for some reason it is not included in the
MUST list in the Clazz.load() call.

#3 J2S compiler bug -- inner classes variables are simplified to a b c d..., making it
nearly impossible to insert @j2sNative blocks.

#2 array declarations 

 int[][] a = new int[3][]
 
 and
 
 int[] a = new int[3]
 
 are treated the same. The first needs to be changed to javajs.util.AU.newInt2(3)
 Several similar methods are in javajs.util.AU
 

#1 The J2S compiler has support for proper method signature handling 
in cases such as:

  new URL((URL) null, filePath, null)
  
The issue here is that without that (URL) the call is ambiguous. 
However, there is a flaw in j2slib (jmolj2s) in that the called 
method receives a "null" URL object, which does not in JavaScript
evaluate to true for "== null". Thus, testing for null within 
functions called this way process improperly.

For example, in javax.swing.RepaintManager:

	public static RepaintManager currentManager(JComponent c) {
		return currentManager((Component) c);
	}

This causes an infinite loop.


j2sjmol.js (j2slib.js)
----------------------
j2sjmol required modification to properly identify the end of all class loading so 
that an asynchronous function can be called. Working currently with 

   Clazz.loadClass("java.util.Properties",function(){alert("ready!")})
   
for user-controlled loading of classes from JavaScript.
   

JavaScript Examples used for testing
------------------------------------
Clazz.loadClass(); // equates "Class" with "Clazz" and allow uncompressed code calling

Class.loadClass("jsjava.text.SimpleDateFormat");

   undefined

x = new jsjava.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z");

   Object { serialVersionOnStream: 1, pattern: "EEE, d MMM yyyy HH:mm:ss Z", compiledPattern: Array[16], zeroDigit: "

x.format(new Date);

   "Sat, 4 Apr 2015 03:57:31 -0500"

Class.loadClass("jsjava.text.SimpleDateFormat", function() { x = new jsjava.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z"); x.format(new Date)} );


  

Differences to Original JDK 1.6
===============================

DISCUSS
=======

Table row/col sorter needs checking after removal of java.text.Collator references

I had to move all of SunHints class to RenderingHints, or the 
two classes could not be loaded. Shouldn't be a problem, I think. The sun classes are
not accessible anyway.

We now have jsjava.lang.Thread and jsjava.lang.ThreadGroup. These should be useful in
figuring out what we want to do with those. ThreadGroup in particular is interesting,
as it is used to key for AppContexts. We will see if that use useful or not.


MINOR ISSUES--requiring no rewriting
====================================

accessibility
native classes
security
serialization

MINOR ISSUES--requiring some rewriting/refactoring by Bob and Udo  
=================================================================

java.util.BitSet must be 16-bit

Thread.currentThread() == dispatchThread


MINOR ISSUES--requiring some rewriting/refactoring outside of SwingJS  
=====================================================================

primitive numerical types
distinguishing arrays
forced null typing
native classes
java.awt.Color
javax.swing.JFileDialog
key focus
static methods and classes -- order is important
LookAndFeel
inner class order

MAJOR ISSUES--for Bob and Udo within SwingJS
============================================

fonts
OS-dependent classes
AWT component peers


MAJOR ISSUES--to be resolved by implementers
============================================

fonts
specific AWT components not implemented
threads
image loading
no BigInteger; no BigDecimal
no format internationalization
no winding rules
text-related field implementation
 
//////////////////////////////////////////////////////////////////////////////

MINOR ISSUES--requiring no rewriting
====================================

accessibility
-------------

All Accessibility handling has been commented out to save the download footprint.
This removes the need for sun.misc.SharedSecrets


security
--------

All JavaScript security is handled by the browser natively. 
Thus, Java security checking is no longer necessary, and 
java.security.AccessController has been simplified to work without
native security checking.


serialization
-------------

All serialization has been removed. It was never very useful for Swing anyway, 
because one needs exactly the same Java version to save and restore serialized objects.


MINOR ISSUES--requiring some rewriting/refactoring by Bob and Udo  
=================================================================


java.util.BitSet must be 16-bit
-------------------------------

Although JavaScript will support numerical values up to 2^54, 
these "long" values are really doubles. In addition, bit-wise 
operations on values greater than 2^30 do not give the 
expected results because integer bit-wise operation is used. 

Math.pow(2,31)
2147483648
Math.pow(2,31)&Math.pow(2,31)
-2147483648

This is no real consequence; it's just something that has to be done.


Thread.currentThread() == dispatchThread
----------------------------------------

changed to JSToolkit.isDispatchThread()


MINOR ISSUES--requiring some rewriting/refactoring outside of SwingJS  
=====================================================================

primitive numerical types
-------------------------

JavaScript cannot distinguish among primitive number types 
int, short, float, and double. Bob's J2S fix does allow for
distinguishing between int[] and float[], but that is all. 
The implication is for overloaded methods and constructors.
For example:

  Color(int r, int g, int b, int a)
  Color(float r, float g, float b, float a)

cannot be distinguished. A very important case in this regard is 

  StringBuffer.append(int)
  StringBuffer.append(float)
  
There is no way to know one's intent here. Integers must be changed to strings:

  sb.append("" + i)

  

This will need careful checking and will be the source of bugs, for sure,
because it is next to impossible to find all of these, and even if they are
found, certain cases such as above will never be perfectly resolved.

In addition, JavaScript does not/cannot support "long". 
One cannot test against Long.MAX_VALUE or Long.MIN_VALUE.

Since int, long, byte, and char are not really integers, care must be taken 
to avoid a loop such as the following, which was in java.text.DigitList:

  while (source > 0) {
    ... 
    source /= 10 
  }

Similarly, large integers will never roll over to negative ones. They will
just get bigger.

						int newLength = lineBuf.length * 2;
						/**
						 * @j2sIgnore
						 */
						{
							// never going to happen in JavaScript
							if (newLength < 0) {
								newLength = Integer.MAX_VALUE;
							}
						}


Also, J2S does not translate properly

  int n = 110
  n /= 100
  
This needs to be recast as
  
  n = n / 100
  
For example, SimpleDateFormat needs

month = Clazz.doubleToInt(month / 367);

instead of 

month /= 367


distinguishing arrays
---------------------

J2S cannot distinguish array types.
One cannot test:

  if (x instanceof float[]) {
  } else if (x instanceof double[]) {
  } else if (x instanceof Point2D[]) {
  }
   
The javajs.util.AU class does provide a set of tests for specific
kinds of arrays, but this is still not perfect, and it is not complete.
These methods call Clazz.isAxx methods and depend upon the first
inner-most array and, in some cases, inner-most array itself not being null.

  public static boolean isAB(Object x)     // byte[]
  public static boolean isAI(Object x)     // int[]
  public static boolean isAII(Object x)    // int[][]
  public static boolean isAF(Object x)     // float[]
  public static boolean isAFF(Object x)    // float[][]
  public static boolean isAFFF(Object x)   // float[][][]
  public static boolean isAD(Object x)     // double[]
  public static boolean isADD(Object x)    // double[][]
  
  public static boolean isAFloat(Object x) // Float[]
  public static boolean isAS(Object x)     // String[]
  public static boolean isASS(Object x)    // String[][]
  public static boolean isAP(Object x)     // javajs.util.T3[]

  

forced null typing
------------------

The J2S compiler has support for proper method signature handling 
in cases such as:

  new URL((URL) null, filePath, null)
  
The issue here is that without that (URL) the call is ambiguous. 
However, there is a flaw in j2slib (jmolj2s) in that the called 
method receives a "null" URL object, which does not in JavaScript
evaluate to true for "== null". Thus, testing for null within 
functions called this way process improperly.


java.awt.Color
--------------

See note under primitive types, above.

ColorSpace: only "support" CS_sRGB

 -BH: This is a temporary edit just to get us started.


javax.swing.JFileDialog
-----------------------

Not implemented. HTML5 cannot expose a file directory structure


native classes
--------------

The J2S compiler ignores all static native method declarations.
Anything of this nature needs to be implemented in JavaScript if it is needed,
using j2sNative blocks:

/**
 * @j2sNative
 *
 */
 {
   // it is critical to remember to insert this { } phrasing, 
   // or the block will be ignored!
 }
 

key Focus
---------
- Less explicit key focus 
- handling (mostly done by Browser/HTML)
- no SwingUtilities.findFocusOwner

static methods and classes -- order is important
------------------------------------------------

J2S cannot run a static method that calls an uninitiated static variable:

	static int x = createX();

    static int createX() {
		return y;
	}
	
	static int y = 20;

will fail. It's actually quite odd that it does not fail in Java as well.

Likewise, static classes hidden in other classes must be presented in an order
that does not call an uninitiated class. In java.util.Collections, for example,
it was important to move SynchronizedRandomAccessList to after SynchronizedList.

LookAndFeel
-----------

SwingJS implements the native browser LookAndFeel. Token UIManager methods are
present but unimplemented; methods returning key bindings or other arrays return null.

inner class order
-----------------
For J2S, inner classes must not call other inner classes defined after them in a file.

This showed up in java.awt.geom.Path2D.Float.CopyIterator, which extends
java.awt.geom.Path2D.Iterator. Since the Iterator is in the code after CopyIterator,
the reference to java.awt.geom.Path2D.Iterator in
    
    c$ = Clazz.decorateAsClass (function () {
		this.floatCoords = null;
		Clazz.instantialize (this, arguments);
	}, java.awt.geom.Path2D.Float, "CopyIterator", java.awt.geom.Path2D.Iterator);
     
is null, and then CopyIterator does not extend Iterator.

Solution is to simply move the inner class definitions in the .java file


MAJOR ISSUES--for Bob and Udo within SwingJS
============================================

fonts
-----

Fonts and FontMetrics will all be handled in JavaScript. Font matching will 
not be exact, and composite (drawn) fonts will not be supported. 

Jmol handles calls such as font.getFontMetrics(g).stringWidth("xxx") by 
creating an off-page DOM image and querying its context. 
This will be done here as well.
 
 
OS-dependent classes
--------------------

Static classes such as:

   java.awt.Toolkit
   java.awt.GraphicsEnvironment
   
   
which are created using Class.forName
will be implemented as JavaScript classes in the swingjs package

AWTAccessor and  AwtContext need to be customized 

   
AWT component peers
-------------------

ComponentPeer is a class that represents a native AWT component.
Components with such peers are called "heavy-weight" components.
They are expected to do the dirty work of graphics drawing. 

Java Swing implements peers only for JApplet, JDialog, JFrame, and JWindow. 
References to such objects have been removed, but clearly there must be 
some connection to similar DOM objects, even for "light-weight" components. 


  
MAJOR ISSUES--to be resolved by implementers
============================================

fonts
-----

Glyph/composite/outline fonts are not supported
   

specific AWT components not implemented
---------------------------------------

The only AWT components implemented are Dialog, Frame, Panel, and Window
They are subclassed as JDialog, JFrame, JPanel/JApplet, and JWindow, respectively


threads
-------

Thread locking and synchronization are not relevant to JavaScript.
Thus, anything requiring "notify.." or "waitFor.." could be a serious issue.
 
All threading must be "faked" in JavaScript. Specifically not available is:

  Thread.sleep()
  
javax.swing.AbstractButton#doClick(pressTime) will not work, as it requires Thread.sleep();
    
However, java.lang.Thread itself is implemented and used extensively. 

Methods thread.start() and thread.run() both work fine. 

In addition, SwingJS provides swingjs.JSThread, which can be subclassed
if desired. This class allows simple 

  while(!interrupted()){
  	wait()
  	...
  }  

action through an asynchronous function run1(mode). For example:

	protected void run1(int mode) {
		try {
			while (true)
				switch (mode) {
				case INIT:
					// once-through stuff here
					mode = LOOP;
					break;
				case LOOP:
					if (!doDispatch || isInterrupted()) {
						mode = DONE;
					} else {
						Runnable r = new Runnable() {
							public void run() {
								// put the loop code here
							}
						};
						dispatchAndReturn(r);
						if (isJS)
							return;
					}
					break;
				// add more cases as needed
				case DONE:
					// finish up here
					if (isInterrupted())
						return;
					// or here
					break;
				}
		} finally {
			// stuff here to be executed after each loop in JS or at the end in Java
		}
	}

image loading
-------------
- JavaScript does not allow synchronous image loading. A callback is required, and 
  since there is no Thread.sleep, this could be a problem in some cases. 

- BufferedImage: only "support" imageType RGB and ARGB
  -BH: This is a temporary edit, just to get us started. Certainly GRAY will be needed


no BigInteger; no BigDecimal
----------------------------

BigInteger and BigDecimal are not supported


no format internationalization
------------------------------

For now, just en for number and date formatters

no winding rules
----------------

  When filling a graphic, only nonzero winding rule is implemented in HTML5 Canvas2D.



text-related field implementation
---------------------------------

Text fields are:

JTextField   (JavaScript <input type="text">)
JTextArea    (JavaScript <textarea>; TODO)
JTextPane    (JavaScript <div>; non-editing; TODO)
JEditorPane  NOT IMPLEMENTED

For the initial implementation, we don't implement infinite undo/redo, and the abstract 
document model is much less elaborate. Only PlainDocument (in the form of JSPlainDocument)
is implemented. 
Thus, the Document returned by JTextField.getDocument() is a javax.swing.text.Document, but it
is a swingjs.JSPlainDocument (extending swingjs.JSAbstractDocument)
rather than a javax.swing.text.PlainDocument (extending javax.swing.text.AbstractDocument).

all scrolling is handled by HTML5
javax.swing.AutoScroller is not implemented
public static methods .stop, .isRunning, .processMouseDragged require true Java threading
javax.swing.text.View and its subclasses are not implemented. 

The JS document model does not allow two fields to address the same underlying document. 

 

